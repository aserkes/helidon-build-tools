[
  {
    "module": "io.helidon.security.providers.httpauth",
    "types": [
      {
        "annotatedType": "io.helidon.security.providers.httpauth.ConfigUserStore.ConfigUser",
        "type": "io.helidon.security.providers.httpauth.ConfigUserStore.ConfigUser",
        "producers": [
          "io.helidon.security.providers.httpauth.ConfigUserStore.ConfigUser#create(io.helidon.config.Config)"
        ],
        "options": [
          {
            "description": "User's password",
            "key": "password"
          },
          {
            "description": "List of roles the user is in",
            "key": "roles",
            "kind": "LIST"
          },
          {
            "description": "User's login",
            "key": "login"
          }
        ]
      },
      {
        "annotatedType": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder",
        "description": "Http digest authentication security provider",
        "prefix": "http-digest-auth",
        "type": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider",
        "producers": [
          "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder#build()",
          "io.helidon.security.providers.httpauth.HttpDigestAuthProvider#create(io.helidon.config.Config)"
        ],
        "provides": [
          "io.helidon.security.spi.SecurityProvider",
          "io.helidon.security.spi.AuthenticationProvider"
        ],
        "options": [
          {
            "defaultValue": "NONE",
            "description": "Only `AUTH` supported. If left empty, uses the legacy approach (older RFC version). `AUTH-INT` is not supported.",
            "key": "qop",
            "method": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder#addDigestQop(io.helidon.security.providers.httpauth.HttpDigest.Qop)",
            "type": "io.helidon.security.providers.httpauth.HttpDigest.Qop",
            "allowedValues": [
              {
                "description": "Legacy approach - used internally to parse headers. Do not use this option when\n building provider. If you want to support only legacy RFC, please use\n HttpDigestAuthProvider.Builder#noDigestQop().\n Only #AUTH is supported, as auth-int requires access to message body.",
                "value": "NONE"
              },
              {
                "description": "QOP \"auth\" - stands for \"authentication\".",
                "value": "AUTH"
              }
            ]
          },
          {
            "description": "Set user store to obtain passwords and roles based on logins.",
            "key": "users",
            "kind": "LIST",
            "method": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder#userStore(io.helidon.security.providers.httpauth.SecureUserStore)",
            "type": "io.helidon.security.providers.httpauth.ConfigUserStore.ConfigUser"
          },
          {
            "defaultValue": "86400000",
            "description": "How long will the nonce value be valid. When timed-out, browser will re-request username/password.",
            "key": "nonce-timeout-millis",
            "method": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder#digestNonceTimeout(long, java.util.concurrent.TimeUnit)",
            "type": "java.lang.Long"
          },
          {
            "description": "The nonce is encrypted using this secret - to make sure the nonce we get back was generated by us and to\n make sure we can safely time-out nonce values.\n This secret must be the same for all service instances (or all services that want to share the same authentication).\n Defaults to a random password - e.g. if deployed to multiple servers, the authentication WILL NOT WORK. You MUST\n provide your own password to work in a distributed environment with non-sticky load balancing.",
            "key": "server-secret",
            "method": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder#digestServerSecret(char[])"
          },
          {
            "defaultValue": "false",
            "description": "Whether authentication is required.\n By default, request will fail if the authentication cannot be verified.\n If set to false, request will process and this provider will abstain.",
            "key": "optional",
            "method": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder#optional(boolean)",
            "type": "java.lang.Boolean"
          },
          {
            "defaultValue": "Helidon",
            "description": "Set the realm to use when challenging users.",
            "key": "realm",
            "method": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder#realm(java.lang.String)"
          },
          {
            "defaultValue": "MD5",
            "description": "Digest algorithm to use.",
            "key": "algorithm",
            "method": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder#digestAlgorithm(io.helidon.security.providers.httpauth.HttpDigest.Algorithm)",
            "type": "io.helidon.security.providers.httpauth.HttpDigest.Algorithm",
            "allowedValues": [
              {
                "description": "MD5 algorithm.",
                "value": "MD5"
              }
            ]
          },
          {
            "defaultValue": "USER",
            "description": "Principal type this provider extracts (and also propagates).",
            "key": "principal-type",
            "method": "io.helidon.security.providers.httpauth.HttpDigestAuthProvider.Builder#subjectType(io.helidon.security.SubjectType)",
            "type": "io.helidon.security.SubjectType",
            "allowedValues": [
              {
                "description": "",
                "value": "USER"
              },
              {
                "description": "",
                "value": "SERVICE"
              }
            ]
          }
        ]
      },
      {
        "annotatedType": "io.helidon.security.providers.httpauth.HttpBasicAuthProvider.Builder",
        "description": "HTTP Basic Authentication provider",
        "prefix": "http-basic-auth",
        "type": "io.helidon.security.providers.httpauth.HttpBasicAuthProvider",
        "producers": [
          "io.helidon.security.providers.httpauth.HttpBasicAuthProvider.Builder#build()",
          "io.helidon.security.providers.httpauth.HttpBasicAuthProvider#create(io.helidon.config.Config)"
        ],
        "provides": [
          "io.helidon.security.spi.SecurityProvider",
          "io.helidon.security.spi.AuthenticationProvider"
        ],
        "options": [
          {
            "description": "Set user store to validate users.\n Removes any other stores added through #addUserStore(SecureUserStore).",
            "key": "users",
            "kind": "LIST",
            "method": "io.helidon.security.providers.httpauth.HttpBasicAuthProvider.Builder#userStore(io.helidon.security.providers.httpauth.SecureUserStore)",
            "type": "io.helidon.security.providers.httpauth.ConfigUserStore.ConfigUser"
          },
          {
            "defaultValue": "false",
            "description": "Whether authentication is required.\n By default, request will fail if the authentication cannot be verified.\n If set to false, request will process and this provider will abstain.",
            "key": "optional",
            "method": "io.helidon.security.providers.httpauth.HttpBasicAuthProvider.Builder#optional(boolean)",
            "type": "java.lang.Boolean"
          },
          {
            "description": "Add a new outbound target to configure identity propagation or explicit username/password.",
            "key": "outbound",
            "kind": "LIST",
            "method": "io.helidon.security.providers.httpauth.HttpBasicAuthProvider.Builder#addOutboundTarget(io.helidon.security.providers.common.OutboundTarget)",
            "type": "io.helidon.security.providers.common.OutboundTarget"
          },
          {
            "defaultValue": "helidon",
            "description": "Set the realm to use when challenging users.",
            "key": "realm",
            "method": "io.helidon.security.providers.httpauth.HttpBasicAuthProvider.Builder#realm(java.lang.String)"
          },
          {
            "defaultValue": "USER",
            "description": "Principal type this provider extracts (and also propagates).",
            "key": "principal-type",
            "method": "io.helidon.security.providers.httpauth.HttpBasicAuthProvider.Builder#subjectType(io.helidon.security.SubjectType)",
            "type": "io.helidon.security.SubjectType",
            "allowedValues": [
              {
                "description": "",
                "value": "USER"
              },
              {
                "description": "",
                "value": "SERVICE"
              }
            ]
          }
        ]
      }
    ]
  }
]