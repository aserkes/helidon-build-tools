[
  {
    "module": "io.helidon.security",
    "types": [
      {
        "annotatedType": "io.helidon.security.SecurityTime.Builder",
        "type": "io.helidon.security.SecurityTime",
        "producers": [
          "io.helidon.security.SecurityTime.Builder#build()",
          "io.helidon.security.SecurityTime#create(io.helidon.config.Config)"
        ],
        "options": [
          {
            "defaultValue": "0",
            "description": "Configure a time-shift in seconds, to move the current time to past or future.",
            "key": "shift-by-seconds",
            "method": "io.helidon.security.SecurityTime.Builder#shiftBySeconds(long)",
            "type": "java.lang.Long"
          },
          {
            "description": "Set an explicit value for one of the time fields (such as ChronoField#YEAR).",
            "key": "year",
            "method": "io.helidon.security.SecurityTime.Builder#value(java.time.temporal.ChronoField, long)",
            "type": "java.lang.Long"
          },
          {
            "description": "Set an explicit value for one of the time fields (such as ChronoField#YEAR).",
            "key": "millisecond",
            "method": "io.helidon.security.SecurityTime.Builder#value(java.time.temporal.ChronoField, long)",
            "type": "java.lang.Long"
          },
          {
            "description": "Set an explicit value for one of the time fields (such as ChronoField#YEAR).",
            "key": "minute",
            "method": "io.helidon.security.SecurityTime.Builder#value(java.time.temporal.ChronoField, long)",
            "type": "java.lang.Long"
          },
          {
            "description": "Set an explicit value for one of the time fields (such as ChronoField#YEAR).",
            "key": "second",
            "method": "io.helidon.security.SecurityTime.Builder#value(java.time.temporal.ChronoField, long)",
            "type": "java.lang.Long"
          },
          {
            "description": "Override current time zone. The time will represent the SAME instant, in an explicit timezone.\n <p>\n If we are in a UTC time zone and you set the timezone to \"Europe/Prague\", the time will be shifted by the offset\n of Prague (e.g. if it is noon right now in UTC, you would get 14:00).",
            "key": "time-zone",
            "method": "io.helidon.security.SecurityTime.Builder#timeZone(java.time.ZoneId)",
            "type": "java.time.ZoneId"
          },
          {
            "description": "Set an explicit value for one of the time fields (such as ChronoField#YEAR).",
            "key": "month",
            "method": "io.helidon.security.SecurityTime.Builder#value(java.time.temporal.ChronoField, long)",
            "type": "java.lang.Long"
          },
          {
            "description": "Set an explicit value for one of the time fields (such as ChronoField#YEAR).",
            "key": "day-of-month",
            "method": "io.helidon.security.SecurityTime.Builder#value(java.time.temporal.ChronoField, long)",
            "type": "java.lang.Long"
          },
          {
            "description": "Set an explicit value for one of the time fields (such as ChronoField#YEAR).",
            "key": "hour-of-day",
            "method": "io.helidon.security.SecurityTime.Builder#value(java.time.temporal.ChronoField, long)",
            "type": "java.lang.Long"
          }
        ]
      },
      {
        "annotatedType": "io.helidon.security.Security.Builder",
        "description": "Configuration of security providers, integration and other security options",
        "prefix": "security",
        "type": "io.helidon.security.Security",
        "standalone": true,
        "producers": [
          "io.helidon.security.Security.Builder#build()",
          "io.helidon.security.Security#create(io.helidon.config.Config)"
        ],
        "options": [
          {
            "defaultValue": "FIRST",
            "description": "Type of the policy.",
            "key": "provider-policy.type",
            "method": "io.helidon.security.Security.Builder#providerSelectionPolicy(java.util.function.Function<io.helidon.security.spi.ProviderSelectionPolicy.Providers,io.helidon.security.spi.ProviderSelectionPolicy>)",
            "type": "io.helidon.security.ProviderSelectionPolicyType",
            "allowedValues": [
              {
                "description": "Choose first provider from the list by default.\n Choose provider with the name defined when explicit provider requested.",
                "value": "FIRST"
              },
              {
                "description": "Can compose multiple providers together to form a single\n logical provider.",
                "value": "COMPOSITE"
              },
              {
                "description": "Explicit class for a custom ProviderSelectionPolicyType.",
                "value": "CLASS"
              }
            ]
          },
          {
            "description": "Provider selection policy class name, only used when type is set to CLASS",
            "key": "provider-policy.class-name",
            "method": "io.helidon.security.Security.Builder#providerSelectionPolicy(java.util.function.Function<io.helidon.security.spi.ProviderSelectionPolicy.Providers,io.helidon.security.spi.ProviderSelectionPolicy>)",
            "type": "java.lang.Class"
          },
          {
            "description": "Configure executor service to be used for blocking operations within security.",
            "key": "environment.executor-service",
            "method": "io.helidon.security.Security.Builder#executorService(java.util.function.Supplier<java.util.concurrent.ExecutorService>)",
            "type": "io.helidon.common.configurable.ThreadPoolSupplier"
          },
          {
            "defaultValue": "true",
            "description": "Whether or not tracing should be enabled. If set to false, security tracer will be a no-op tracer.",
            "key": "tracing.enabled",
            "method": "io.helidon.security.Security.Builder#tracingEnabled(boolean)",
            "type": "java.lang.Boolean"
          },
          {
            "description": "Server time to use when evaluating security policies that depend on time.",
            "key": "environment.server-time",
            "method": "io.helidon.security.Security.Builder#serverTime(io.helidon.security.SecurityTime)",
            "type": "io.helidon.security.SecurityTime"
          },
          {
            "description": "Configured secrets",
            "key": "secrets",
            "kind": "LIST",
            "method": "io.helidon.security.Security.Builder#addSecret(java.lang.String, io.helidon.security.spi.SecretsProvider<T>, T)",
            "type": "io.helidon.config.Config"
          },
          {
            "defaultValue": "true",
            "description": "Security can be disabled using configuration, or explicitly.\n By default, security instance is enabled.\n Disabled security instance will not perform any checks and allow\n all requests.",
            "key": "enabled",
            "method": "io.helidon.security.Security.Builder#enabled(boolean)",
            "type": "java.lang.Boolean"
          },
          {
            "description": "ID of the default authentication provider",
            "key": "default-authentication-provider",
            "method": "io.helidon.security.Security.Builder#authenticationProvider(io.helidon.security.spi.AuthenticationProvider)",
            "provider": true
          },
          {
            "description": "Name of the secret provider",
            "key": "secrets.*.provider",
            "method": "io.helidon.security.Security.Builder#addSecret(java.lang.String, io.helidon.security.spi.SecretsProvider<T>, T)"
          },
          {
            "description": "Configuration specific to the secret provider",
            "key": "secrets.*.config",
            "method": "io.helidon.security.Security.Builder#addSecret(java.lang.String, io.helidon.security.spi.SecretsProvider<T>, T)",
            "type": "io.helidon.security.SecretsProviderConfig",
            "provider": true
          },
          {
            "description": "ID of the default authorization provider",
            "key": "default-authorization-provider",
            "method": "io.helidon.security.Security.Builder#authorizationProvider(io.helidon.security.spi.AuthorizationProvider)"
          },
          {
            "description": "Add a provider, works as #addProvider(io.helidon.security.spi.SecurityProvider, String), where the name is set\n to {@link\n Class#getSimpleName()}.",
            "key": "providers",
            "kind": "LIST",
            "method": "io.helidon.security.Security.Builder#addProvider(io.helidon.security.spi.SecurityProvider)",
            "type": "io.helidon.security.spi.SecurityProvider",
            "provider": true,
            "required": true
          },
          {
            "description": "Name of the secret, used for lookup",
            "key": "secrets.*.name",
            "method": "io.helidon.security.Security.Builder#addSecret(java.lang.String, io.helidon.security.spi.SecretsProvider<T>, T)"
          }
        ]
      }
    ]
  }
]