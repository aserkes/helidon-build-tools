[
  {
    "module": "io.helidon.security.providers.common",
    "types": [
      {
        "annotatedType": "io.helidon.security.providers.common.OutboundConfig.Builder",
        "description": "Outbound configuration for outbound security",
        "type": "io.helidon.security.providers.common.OutboundConfig",
        "producers": [
          "io.helidon.security.providers.common.OutboundConfig.Builder#build()",
          "io.helidon.security.providers.common.OutboundConfig#create(io.helidon.config.Config)"
        ],
        "options": [
          {
            "description": "Add a new target configuration.",
            "key": "outbound",
            "kind": "LIST",
            "method": "io.helidon.security.providers.common.OutboundConfig.Builder#addTarget(io.helidon.security.providers.common.OutboundTarget)",
            "type": "io.helidon.security.providers.common.OutboundTarget"
          }
        ]
      },
      {
        "annotatedType": "io.helidon.security.providers.common.EvictableCache.Builder",
        "type": "io.helidon.security.providers.common.EvictableCache",
        "producers": [
          "io.helidon.security.providers.common.EvictableCache.Builder#build()"
        ],
        "options": [
          {
            "defaultValue": "true",
            "description": "If the cacheEnabled is set to false, no caching will be done.\n Otherwise (default behavior) evictable caching will be used.",
            "key": "cache-enabled",
            "method": "io.helidon.security.providers.common.EvictableCache.Builder#cacheEnabled(boolean)",
            "type": "java.lang.Boolean"
          },
          {
            "description": "Configure evictor to check if a record is still valid.\n This should be a fast way to check, as it is happening in a ConcurrentHashMap#forEachKey(long, Consumer).\n This is also called during all get and remove operations to only return valid records.",
            "key": "evictor-class",
            "method": "io.helidon.security.providers.common.EvictableCache.Builder#evictor(java.util.function.BiFunction<K,V,java.lang.Boolean>)",
            "type": "java.lang.Class"
          },
          {
            "defaultValue": "10000",
            "description": "Configure parallelism threshold.",
            "key": "parallelism-threshold",
            "method": "io.helidon.security.providers.common.EvictableCache.Builder#parallelismThreshold(long)",
            "type": "java.lang.Long"
          },
          {
            "defaultValue": "3600000",
            "description": "Configure record timeout since last access.",
            "key": "cache-timeout-millis",
            "method": "io.helidon.security.providers.common.EvictableCache.Builder#timeout(long, java.util.concurrent.TimeUnit)",
            "type": "java.lang.Long"
          },
          {
            "defaultValue": "60000",
            "description": "Delay from the creation of the cache to first eviction",
            "key": "cache-evict-delay-millis",
            "method": "io.helidon.security.providers.common.EvictableCache.Builder#evictSchedule(long, long, java.util.concurrent.TimeUnit)",
            "type": "java.lang.Long"
          },
          {
            "defaultValue": "300000",
            "description": "How often to evict records",
            "key": "cache-evict-period-millis",
            "method": "io.helidon.security.providers.common.EvictableCache.Builder#evictSchedule(long, long, java.util.concurrent.TimeUnit)",
            "type": "java.lang.Long"
          },
          {
            "defaultValue": "100000",
            "description": "Configure maximal cache size.",
            "key": "max-size",
            "method": "io.helidon.security.providers.common.EvictableCache.Builder#maxSize(long)",
            "type": "java.lang.Long"
          },
          {
            "defaultValue": "3600000",
            "description": "Configure record timeout since its creation.",
            "key": "cache-overall-timeout-millis",
            "method": "io.helidon.security.providers.common.EvictableCache.Builder#overallTimeout(long, java.util.concurrent.TimeUnit)",
            "type": "java.lang.Long"
          }
        ]
      },
      {
        "annotatedType": "io.helidon.security.providers.common.OutboundTarget.Builder",
        "type": "io.helidon.security.providers.common.OutboundTarget",
        "producers": [
          "io.helidon.security.providers.common.OutboundTarget.Builder#build()",
          "io.helidon.security.providers.common.OutboundTarget#create(io.helidon.config.Config)"
        ],
        "options": [
          {
            "description": "Add supported paths for this target. May be called more than once to add more paths.\n The path is tested as is against called path, and also tested as a regular expression.",
            "key": "paths",
            "kind": "LIST",
            "method": "io.helidon.security.providers.common.OutboundTarget.Builder#addPath(java.lang.String)"
          },
          {
            "description": "Add supported method for this target. May be called more than once to add more methods.\n The method is tested as is ignoring case against the used method.",
            "key": "methods",
            "kind": "LIST",
            "method": "io.helidon.security.providers.common.OutboundTarget.Builder#addMethod(java.lang.String)"
          },
          {
            "description": "Add supported host for this target. May be called more than once to add more hosts.\n <p>\n Valid examples:\n <ul>\n <li>localhost\n <li>www.google.com\n <li>127.0.0.1\n <li>*.oracle.com\n <li>192.169.*.*\n <li>*.google.*\n </ul>",
            "key": "hosts",
            "kind": "LIST",
            "method": "io.helidon.security.providers.common.OutboundTarget.Builder#addHost(java.lang.String)"
          },
          {
            "description": "Configure the name of this outbound target.",
            "key": "name",
            "method": "io.helidon.security.providers.common.OutboundTarget.Builder#name(java.lang.String)",
            "required": true
          },
          {
            "description": "Add supported transports for this target. May be called more than once to add more transports.\n <p>\n Valid examples:\n <ul>\n <li>http\n <li>https\n </ul>\n There is no wildcard support",
            "key": "transport",
            "kind": "LIST",
            "method": "io.helidon.security.providers.common.OutboundTarget.Builder#addTransport(java.lang.String)"
          }
        ]
      }
    ]
  }
]